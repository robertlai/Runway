// Generated by CoffeeScript 1.10.0
(function() {
  var LocalStrategy, User;

  LocalStrategy = require('passport-local').Strategy;

  User = require('./models/User');

  module.exports = function(passport) {
    passport.serializeUser(function(user, done) {
      return done(null, user.id);
    });
    passport.deserializeUser(function(id, done) {
      return User.findById(id, function(err, user) {
        return done(err, user);
      });
    });
    passport.use('register', new LocalStrategy({
      usernameField: 'username',
      passwordField: 'password',
      passReqToCallback: true
    }, function(req, username, password, done) {
      return User.findOne({
        'username': username
      }, function(err, user) {
        var newUser;
        if (err) {
          return done(err);
        } else if (user) {
          return done(null, false, 'That username is already taken.');
        } else {
          newUser = new User;
          newUser.username = username;
          newUser.password = newUser.generateHash(password);
          return newUser.save(function(err) {
            if (err) {
              return done(err);
            } else {
              return done(null, newUser);
            }
          });
        }
      });
    }));
    return passport.use('login', new LocalStrategy({
      passReqToCallback: true
    }, function(req, username, password, done) {
      return User.findOne({
        'username': username
      }, function(err, user) {
        if (err) {
          return done(err);
        } else if (!user) {
          return done(null, false, 'This user was not found! Check your spelling.');
        } else if (!user.validPassword(password)) {
          return done(null, false, 'Oops! Wrong password.');
        } else {
          return done(null, user);
        }
      });
    }));
  };

}).call(this);

// Generated by CoffeeScript 1.9.3
var LocalStrategy, User, bcrypt, mongoose, userSchema;

LocalStrategy = require('passport-local').Strategy;

mongoose = require('mongoose');

bcrypt = require('bcrypt-nodejs');

userSchema = mongoose.Schema({
  local: {
    username: String,
    password: String
  }
});

userSchema.methods.generateHash = function(password) {
  return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);
};

userSchema.methods.validPassword = function(password) {
  return bcrypt.compareSync(password, this.local.password);
};

User = mongoose.model('User', userSchema);

module.exports = function(passport) {
  passport.serializeUser(function(user, done) {
    return done(null, user.id);
  });
  passport.deserializeUser(function(id, done) {
    return User.findById(id, function(err, user) {
      return done(err, user);
    });
  });
  passport.use('local-register', new LocalStrategy({
    usernameField: 'username',
    passwordField: 'password',
    passReqToCallback: true
  }, function(req, username, password, done) {
    return process.nextTick(function() {
      return User.findOne({
        'local.username': username
      }, function(err, user) {
        var newUser;
        if (err) {
          return done(err);
        }
        if (user) {
          return done(null, false, req.flash('registerMessage', 'That username is already taken.'));
        } else {
          newUser = new User;
          newUser.local.username = username;
          newUser.local.password = newUser.generateHash(password);
          return newUser.save(function(err) {
            if (err) {
              throw err;
            }
            return done(null, newUser);
          });
        }
      });
    });
  }));
  return passport.use('local-login', new LocalStrategy({
    usernameField: 'username',
    passwordField: 'password',
    passReqToCallback: true
  }, function(req, username, password, done) {
    return User.findOne({
      'local.username': username
    }, function(err, user) {
      if (err) {
        return done(err);
      }
      if (!user) {
        return done(null, false, req.flash('loginMessage', 'No user found.'));
      }
      if (!user.validPassword(password)) {
        return done(null, false, req.flash('loginMessage', 'Oops! Wrong password.'));
      }
      return done(null, user);
    });
  }));
};

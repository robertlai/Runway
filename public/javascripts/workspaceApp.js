// Generated by CoffeeScript 1.9.3
var app, scrollAtBottom, scrollToBottom, updateScrollState;

app = angular.module('workspaceApp', []);

scrollAtBottom = true;

app.controller('workspaceController', function($scope, $http) {
  var $dropzone, addPicture, allPicturesInfo, dataURLtoBlob, drop, maxx, maxy, mousex, mousey, queryDropZone, reader, socket;
  socket = io();
  socket.on('initialMessages', function(messages) {
    $scope.messages = messages;
    $scope.$apply();
    return scrollToBottom();
  });
  socket.on('newMessage', function(message) {
    $scope.messages.push(message);
    $scope.$apply();
    return scrollToBottom();
  });
  socket.on('removeMessage', function(timestamp) {
    var i, j, len, message, ref;
    i = 0;
    ref = $scope.messages;
    for (j = 0, len = ref.length; j < len; j++) {
      message = ref[j];
      if (message.timestamp === timestamp) {
        $scope.messages.splice(i, 1);
        break;
      }
      i++;
    }
    return $scope.$apply();
  });
  socket.on('initialPictures', function(pictureInfos) {
    var j, len, pictureInfo;
    for (j = 0, len = pictureInfos.length; j < len; j++) {
      pictureInfo = pictureInfos[j];
      addPicture(pictureInfo);
    }
    return $scope.$apply();
  });
  socket.on('updatePicture', function(pictureInfo) {
    if (pictureInfo.x === 0) {
      pictureInfo.x = 1;
    }
    if (pictureInfo.y === 0) {
      pictureInfo.y = 1;
    }
    return $('#' + pictureInfo.fileName).offset({
      top: pictureInfo.y / 100.0 * maxy,
      left: pictureInfo.x / 100.0 * maxx
    });
  });
  socket.on('newPicture', function(pictureInfo) {
    return addPicture(pictureInfo);
  });
  socket.emit('getInitialMessages');
  socket.emit('getInitialPictures');
  reader = new FileReader;
  $dropzone = void 0;
  maxx = void 0;
  maxy = void 0;
  mousex = void 0;
  mousey = void 0;
  allPicturesInfo = [];
  dataURLtoBlob = function(dataurl) {
    var arr, bstr, mime, n, u8arr;
    arr = dataurl.split(',');
    mime = arr[0].match(/:(.*?);/)[1];
    bstr = atob(arr[1]);
    n = bstr.length;
    u8arr = new Uint8Array(n);
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], {
      type: mime
    });
  };
  $scope.buttonClicked = function(str) {
    var tCtx;
    tCtx = $('<canvas/>')[0].getContext('2d');
    tCtx.font = '20px Arial';
    tCtx.canvas.width = tCtx.measureText(str).width;
    tCtx.canvas.height = 25;
    tCtx.font = '20px Arial';
    tCtx.fillText(str, 0, 20);
    reader.onload = function(arrayBuffer) {
      queryDropZone();
      return $.ajax({
        method: 'POST',
        url: '/api/picture?x=1&y=1',
        data: arrayBuffer.target.result,
        processData: false,
        contentType: 'application/binary'
      });
    };
    return reader.readAsArrayBuffer(dataURLtoBlob(tCtx.canvas.toDataURL()));
  };
  queryDropZone = function() {
    maxy = $dropzone.outerHeight();
    return maxx = $dropzone.outerWidth();
  };
  addPicture = function(pictureInfo) {
    if (pictureInfo.x === 0) {
      pictureInfo.x = 1;
    }
    if (pictureInfo.y === 0) {
      pictureInfo.y = 1;
    }
    queryDropZone();
    allPicturesInfo.push(pictureInfo.fileName);
    return $('<img/>', {
      src: '/api/picture?fileToGet=' + pictureInfo.fileName
    }).appendTo($dropzone).wrap('<div id=' + pictureInfo.fileName + ' style=\'position:absolute;\'></div>').parent().offset({
      top: pictureInfo.y / 100.0 * maxy,
      left: pictureInfo.x / 100.0 * maxx
    }).draggable({
      containment: 'parent',
      cursor: 'move',
      stop: function(event, ui) {
        return socket.emit('updatePictureLocation', $(this).attr('id'), ui.offset.left * 100.0 / maxx, ui.offset.top * 100.0 / maxy);
      }
    }).on('resize', function() {
      var height, width;
      width = $(this).outerWidth();
      return height = $(this).outerHeight();
    });
  };
  drop = function(e, hover) {
    e.preventDefault();
    e.stopPropagation();
    if (hover) {
      $(e.target).addClass('hover');
      return $('#dndText').text('Drop to upload');
    } else {
      $(e.target).removeClass('hover');
      return $('#dndText').text('Drag and drop files here');
    }
  };
  $dropzone = $('#dropzone');
  queryDropZone();
  $(document).on('mousemove', function(e) {
    mousex = e.pageX;
    return mousey = e.pageY;
  });
  $dropzone.on('dragover', function(e) {
    return drop(e, true);
  });
  $dropzone.on('dragleave', function(e) {
    return drop(e, false);
  });
  $dropzone.on('drop', function(e) {
    var f;
    drop(e, false);
    if (e.originalEvent.dataTransfer) {
      if (e.originalEvent.dataTransfer.files.length) {
        f = e.originalEvent.dataTransfer.files[0];
        reader.onload = function(arrayBuffer) {
          queryDropZone();
          return $.ajax({
            method: 'POST',
            url: '/api/picture?x=' + mousex * 100.0 / maxx + '&y=' + mousey * 100.0 / maxy,
            data: arrayBuffer.target.result,
            processData: false,
            contentType: 'application/binary'
          });
        };
        return reader.readAsArrayBuffer(f);
      }
    }
  });
  $scope.chatVisible = true;
  $scope.newMessageNotValide = false;
  $scope.messages = [];
  $scope.sendMessage = function() {
    var message;
    if ($scope.newMessage.trim().length > 0) {
      $scope.newMessageNotValide = false;
      message = {
        content: $scope.newMessage,
        user: $scope.username
      };
      socket.emit('postNewMessage', message);
      return $scope.newMessage = '';
    }
  };
  $scope.removeMessage = function(timestamp) {
    return socket.emit('postRemoveMessage', timestamp);
  };
  $scope.hideChat = function() {
    $scope.chatVisible = false;
    return document.getElementById('dropzone').style.width = '100%';
  };
  return $scope.showChat = function() {
    $scope.chatVisible = true;
    return document.getElementById('dropzone').style.width = '75%';
  };
});

window.onload = function() {
  var msgpanel;
  msgpanel = document.getElementById("msgpanel");
  return msgpanel.scrollTop = msgpanel.scrollHeight;
};

updateScrollState = function() {
  return scrollAtBottom = msgpanel.scrollTop === (msgpanel.scrollHeight - msgpanel.offsetHeight);
};

scrollToBottom = function() {
  if (scrollAtBottom) {
    return msgpanel.scrollTop = msgpanel.scrollHeight;
  }
};

// Generated by CoffeeScript 1.9.3
var workspaceApp;

workspaceApp = angular.module('workspaceApp', []);

workspaceApp.controller('workspaceController', function($scope) {
  var $dropzone, addMessageContent, hoverTextOff, hoverTextOn, maxx, maxy, mouseX, mouseY, myDropzone, socket;
  $dropzone = $('#dropzone');
  mouseX = void 0;
  mouseY = void 0;
  maxx = function() {
    return $dropzone.outerWidth();
  };
  maxy = function() {
    return $dropzone.outerHeight();
  };
  myDropzone = new Dropzone('#dropzone', {
    url: '/api/fileUpload',
    method: 'post',
    uploadMultiple: false,
    maxFilesize: 9,
    clickable: false,
    createImageThumbnails: false,
    autoProcessQueue: true,
    acceptedFiles: 'image/*, application/pdf',
    accept: function(file, done) {
      this.options.url = '/api/fileUpload?group=' + $scope.groupName + '&x=' + mouseX * 100.0 / maxx() + '&y=' + mouseY * 100.0 / maxy();
      hoverTextOff();
      return done();
    }
  });
  myDropzone.on('complete', function(file) {
    return myDropzone.removeFile(file);
  });
  socket = io();
  $scope.init = function(username, groupName) {
    $scope.username = username;
    $scope.groupName = groupName;
    return socket.emit('groupConnect', username, groupName);
  };
  socket.on('setupComplete', function() {
    socket.emit('getInitialMessages');
    return socket.emit('getInitialItems');
  });
  socket.on('initialMessages', function(messages) {
    return addMessageContent(function() {
      return $scope.messages = messages;
    });
  });
  socket.on('newMessage', function(message) {
    return addMessageContent(function() {
      return $scope.messages.push(message);
    });
  });
  addMessageContent = function(addFunction, all) {
    var chatBody, scrollAtBottom;
    chatBody = document.getElementById('chatBody');
    scrollAtBottom = all || Math.abs(chatBody.scrollTop - chatBody.scrollHeight + chatBody.offsetHeight) < 50;
    addFunction();
    $scope.$apply();
    if (scrollAtBottom) {
      return chatBody.scrollTop = chatBody.scrollHeight;
    }
  };
  socket.on('removeMessage', function(timestamp) {
    $scope.messages = $scope.messages.filter(function(message) {
      return message.timestamp !== timestamp;
    });
    return $scope.$apply();
  });
  socket.on('updateItem', function(itemInfo) {
    return $('#' + itemInfo.fileName).offset({
      top: itemInfo.y / 100.0 * maxy(),
      left: itemInfo.x / 100.0 * maxx()
    });
  });
  socket.on('newItem', function(itemInfo) {
    var innerContent;
    innerContent = void 0;
    if (itemInfo.type === 'text') {
      innerContent = $('<p/>', {
        "class": 'noselect'
      }).text(itemInfo.text);
    } else if (itemInfo.type.substring(0, 5) === 'image') {
      innerContent = $('<img/>', {
        src: '/api/picture?fileToGet=' + itemInfo.fileName + '&groupName=' + $scope.groupName
      });
    } else if (itemInfo.type === 'application/pdf') {
      innerContent = $('<div style="padding-top:25px; background-color:black;"><object data="/api/picture?fileToGet=' + itemInfo.fileName + '&groupName=' + $scope.groupName + "'/></div>");
    }
    if (innerContent) {
      return innerContent.css('position', 'absolute').attr('id', itemInfo.fileName).appendTo($dropzone).draggable({
        containment: 'parent',
        stop: function(event, ui) {
          return socket.emit('updateItemLocation', $(this).attr('id'), ui.offset.left * 100.0 / maxx(), ui.offset.top * 100.0 / maxy());
        }
      }).offset({
        top: itemInfo.y / 100.0 * maxy(),
        left: itemInfo.x / 100.0 * maxx()
      });
    }
  });
  $scope.addMessageToWorkspace = function(string) {
    var data;
    data = {
      'text': string
    };
    return $.ajax({
      method: 'POST',
      url: '/api/text?group=' + $scope.groupName,
      data: JSON.stringify(data),
      processData: false,
      contentType: 'application/json; charset=utf-8'
    });
  };
  hoverTextOn = function() {
    $('#dropzone').addClass('hover');
    return $('#dndText').text('Drop to upload');
  };
  hoverTextOff = function() {
    $('#dropzone').removeClass('hover');
    return $('#dndText').text('Drag and drop files here');
  };
  $dropzone.on('dragover', function(e) {
    mouseX = e.originalEvent.offsetX;
    mouseY = e.originalEvent.offsetY;
    return hoverTextOn();
  });
  $dropzone.on('dragleave', function(e) {
    return hoverTextOff();
  });
  $scope.chatVisible = true;
  $scope.messages = [];
  $scope.sendMessage = function() {
    if ($scope.newMessage && $scope.newMessage.trim().length > 0) {
      socket.emit('postNewMessage', $scope.newMessage);
      return $scope.newMessage = '';
    }
  };
  $scope.removeMessage = function(timestamp) {
    return socket.emit('postRemoveMessage', timestamp);
  };
  $scope.hideChat = function() {
    return $scope.chatVisible = false;
  };
  return $scope.showChat = function() {
    return $scope.chatVisible = true;
  };
});

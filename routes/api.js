// Generated by CoffeeScript 1.9.3
var File, Message, Picture, api, db, express, fileSchema, fs, messageSchema, mongoose, pictureSchema;

fs = require('fs');

express = require('express');

api = express.Router();

mongoose = require('mongoose');

db = require('../Utilities/DB');

messageSchema = new mongoose.Schema({
  timestamp: Number,
  user: String,
  content: String
});

Message = mongoose.model('message', messageSchema);

pictureSchema = new mongoose.Schema({
  fileName: Number,
  x: Number,
  y: Number
});

Picture = mongoose.model('picture', pictureSchema);

fileSchema = new mongoose.Schema({
  fileName: Number,
  file: Buffer
});

File = mongoose.model('file', fileSchema);

api.post('/api/message', function(req, res) {
  var content, message, timestamp, user;
  timestamp = (new Date()).getTime();
  user = req.query.user;
  content = req.query.content;
  message = new Message({
    timestamp: timestamp,
    user: user,
    content: content
  });
  return message.save(function(err, message) {
    if (err) {
      res.sendStatus(500);
      throw err;
    } else {
      return res.sendStatus(200);
    }
  });
});

api.get('/api/messages', function(req, res) {
  return Message.find({}).sort('timestamp').exec(function(err, messages) {
    if (err) {
      return res.sendStatus(500);
    } else {
      return res.json(messages);
    }
  });
});

api.get('/api/message', function(req, res) {
  var lastMessageId;
  lastMessageId = req.query.lastMessageId ? req.query.lastMessageId : -1;
  return Message.find({}).sort('timestamp').exec(function(err, messages) {
    var i, len, message;
    if (err) {
      res.sendStatus(500);
      throw err;
    } else {
      for (i = 0, len = messages.length; i < len; i++) {
        message = messages[i];
        if (message.timestamp > lastMessageId) {
          res.json(message);
          return;
        }
      }
      return res.sendStatus(404);
    }
  });
});

api.post('/api/picture', function(req, res) {
  var fileName, fullFilePath, x, y;
  fileName = (new Date()).getTime();
  x = req.query.x;
  y = req.query.y;
  fullFilePath = __dirname + '/' + fileName + Math.floor(Math.random() * 20000);
  return req.pipe(fs.createWriteStream(fullFilePath)).on('finish', function() {
    var file, picture;
    picture = new Picture({
      fileName: fileName,
      x: x,
      y: y
    });
    file = new File({
      fileName: fileName,
      file: fs.readFileSync(fullFilePath)
    });
    return file.save(function(err1, file) {
      if (err1) {
        return res.sendStatus(500);
      } else {
        return picture.save(function(err2, picture) {
          if (err2) {
            return res.sendStatus(500);
          } else {
            return res.sendStatus(201);
          }
        });
      }
    }).then(function() {
      return fs.unlinkSync(fullFilePath);
    });
  });
});

api.get('/api/pictures', function(req, res) {
  return Picture.find({}).sort('fileName').exec(function(err, picturesInfo) {
    if (err) {
      return res.sendStatus(500);
    } else {
      return res.json(picturesInfo);
    }
  });
});

api.get('/api/picture', function(req, res) {
  return File.find({}).sort('fileName').exec(function(err, files) {
    var file, i, len;
    if (err) {
      return res.sendStatus(500);
    } else {
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        if (file.fileName.toString() === req.query.fileToGet) {
          res.set({
            'Content-Type': 'image/jpeg'
          });
          res.set({
            'lastFile': file.fileName
          });
          res.send(file.file);
          return;
        }
      }
      return res.sendStatus(500);
    }
  });
});

api.put('/api/picture', function(req, res) {
  var fileName, x, y;
  fileName = req.query.fileName;
  x = req.query.x;
  y = req.query.y;
  return Picture.remove({
    fileName: fileName
  }, function(err, removed) {
    var picture;
    if (err) {
      return res.sendStatus(500);
    } else {
      picture = new Picture({
        fileName: fileName,
        x: x,
        y: y
      });
      return picture.save(function(err2, picture) {
        if (err2) {
          return res.sendStatus(500);
        } else {
          return res.sendStatus(201);
        }
      });
    }
  });
});

module.exports = api;

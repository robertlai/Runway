// Generated by CoffeeScript 1.9.3
var Group, Message, PictureFile, PictureMetadata, User, fs, isLoggedIn;

fs = require('fs');

Message = require('../models/Message');

PictureMetadata = require('../models/pictureMetadata');

PictureFile = require('../models/PictureFile');

User = require('../models/User');

Group = require('../models/Group');

isLoggedIn = function(req, res, next) {
  if (req.isAuthenticated()) {
    return next();
  } else {
    return res.sendStatus(500);
  }
};

module.exports = function(app, passport) {
  var io;
  io = app.io;
  io.on('connection', function(socket) {
    socket.on('groupConnect', function(user, group) {
      socket.join(group);
      socket.username = user;
      socket.group = group;
      return socket.emit('setupComplete');
    });
    socket.on('getInitialMessages', function() {
      return Message.find({
        group: socket.group
      }).sort('timestamp').exec(function(err, messages) {
        if (!err) {
          return socket.emit('initialMessages', messages);
        }
      });
    });
    socket.on('postNewMessage', function(messageContent) {
      var newMessage;
      newMessage = new Message({
        timestamp: (new Date()).getTime(),
        user: socket.username,
        group: socket.group,
        content: messageContent
      });
      return newMessage.save(function(err, message) {
        if (!err) {
          return io.sockets["in"](socket.group).emit('newMessage', message);
        }
      });
    });
    socket.on('postRemoveMessage', function(timestamp) {
      return Message.find({
        timestamp: timestamp,
        group: socket.group
      }).remove(function(err, removedMessage) {
        if (!err) {
          return io.sockets["in"](socket.group).emit('removeMessage', timestamp);
        }
      });
    });
    socket.on('getInitialPictures', function() {
      return PictureMetadata.find({
        group: socket.group
      }).sort('fileName').exec(function(err, picturesInfo) {
        if (!err) {
          return socket.emit('initialPictures', picturesInfo);
        }
      });
    });
    return socket.on('updatePictureLocation', function(fileName, newX, newY) {
      return PictureMetadata.findOne({
        fileName: fileName,
        group: socket.group
      }, function(err, picture) {
        if (!err) {
          picture.x = newX;
          picture.y = newY;
          picture.save();
          return io.sockets["in"](socket.group).emit('updatePicture', picture);
        }
      });
    });
  });
  app.get('/api/groups', isLoggedIn, function(req, res) {
    var err, username;
    username = req.user.username;
    try {
      return User.findOne({
        username: username
      }, function(err1, user) {
        if (err1) {
          throw err1;
        }
        return res.json(user.groups);
      });
    } catch (_error) {
      err = _error;
      return res.sendStatus(500);
    }
  });
  app.post('/api/newGroup', function(req, res) {
    var err, newGroupName, username;
    username = req.user.username;
    newGroupName = req.query.newGroupName;
    try {
      return Group.find({
        name: newGroupName
      }, function(err1, groups) {
        var newGroup;
        if (err1) {
          throw err1;
        }
        if (groups.length > 0) {
          return res.sendStatus(409);
        } else {
          newGroup = new Group({
            name: newGroupName
          });
          return newGroup.save(function(err2, group) {
            if (err2) {
              throw err2;
            }
            return User.findOne({
              username: username
            }, function(err3, user) {
              if (err3) {
                throw err3;
              }
              user.groups.push(newGroupName);
              return user.save(function(err4, user2) {
                if (err4) {
                  throw err4;
                }
                return res.json(newGroupName);
              });
            });
          });
        }
      });
    } catch (_error) {
      err = _error;
      return res.sendStatus(500);
    }
  });
  app.post('/api/picture', function(req, res) {
    var err, fileName, fullFilePath, x, y;
    fileName = (new Date()).getTime();
    x = req.query.x;
    y = req.query.y;
    fullFilePath = __dirname + '/' + fileName + Math.floor(Math.random() * 20000);
    try {
      return req.pipe(fs.createWriteStream(fullFilePath)).on('finish', function() {
        var file, picture;
        picture = new PictureMetadata({
          fileName: fileName,
          x: x,
          y: y,
          group: req.query.group
        });
        file = new PictureFile({
          fileName: fileName,
          file: fs.readFileSync(fullFilePath),
          group: req.query.group
        });
        return file.save(function(err1, file) {
          if (err1) {
            throw err1;
          }
          return picture.save(function(err2, picture) {
            var pictureInfo;
            if (err2) {
              throw err2;
            }
            res.sendStatus(201);
            pictureInfo = {
              fileName: fileName,
              x: x,
              y: y
            };
            return io.sockets["in"](req.query.group).emit('newPicture', pictureInfo);
          });
        }).then(function() {
          return fs.unlinkSync(fullFilePath);
        });
      });
    } catch (_error) {
      err = _error;
      return res.sendStatus(500);
    }
  });
  return app.get('/api/picture', isLoggedIn, function(req, res) {
    var err;
    try {
      return PictureFile.findOne({
        fileName: req.query.fileToGet
      }, function(err, file) {
        if (err) {
          throw err;
        }
        res.set({
          'Content-Type': 'image/jpeg'
        });
        return res.send(file.file);
      });
    } catch (_error) {
      err = _error;
      return res.sendStatus(500);
    }
  });
};

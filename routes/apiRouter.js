// Generated by CoffeeScript 1.9.3
var Message, PictureFile, PictureMetadata, api, express, fs;

fs = require('fs');

express = require('express');

api = express.Router();

Message = require('../models/Message');

PictureMetadata = require('../models/pictureMetadata');

PictureFile = require('../models/PictureFile');

api.post('/message', function(req, res) {
  var content, message, timestamp, user;
  timestamp = (new Date()).getTime();
  user = req.query.user;
  content = req.query.content;
  message = new Message({
    timestamp: timestamp,
    user: user,
    content: content
  });
  return message.save(function(err, message) {
    if (err) {
      res.sendStatus(500);
      throw err;
    } else {
      return res.sendStatus(200);
    }
  });
});

api.get('/messages', function(req, res) {
  return Message.find({}).sort('timestamp').exec(function(err, messages) {
    if (err) {
      return res.sendStatus(500);
    } else {
      return res.json(messages);
    }
  });
});

api.get('/message', function(req, res) {
  var lastMessageId;
  lastMessageId = req.query.lastMessageId ? req.query.lastMessageId : -1;
  return Message.find({}).sort('timestamp').exec(function(err, messages) {
    var i, len, message;
    if (err) {
      res.sendStatus(500);
      throw err;
    } else {
      for (i = 0, len = messages.length; i < len; i++) {
        message = messages[i];
        if (message.timestamp > lastMessageId) {
          res.json(message);
          return;
        }
      }
      return res.sendStatus(404);
    }
  });
});

api["delete"]('/message', function(req, res) {
  var messageTimeStampToDelete;
  messageTimeStampToDelete = req.query.timestamp;
  return Message.find({
    timestamp: messageTimeStampToDelete
  }).remove(function(err, removedMessage) {
    if (err) {
      return res.sendStatus(500);
    } else {
      return res.sendStatus(200);
    }
  });
});

api.post('/picture', function(req, res) {
  var fileName, fullFilePath, x, y;
  fileName = (new Date()).getTime();
  x = req.query.x;
  y = req.query.y;
  fullFilePath = __dirname + '/' + fileName + Math.floor(Math.random() * 20000);
  return req.pipe(fs.createWriteStream(fullFilePath)).on('finish', function() {
    var file, picture;
    picture = new PictureMetadata({
      fileName: fileName,
      x: x,
      y: y
    });
    file = new PictureFile({
      fileName: fileName,
      file: fs.readFileSync(fullFilePath)
    });
    return file.save(function(err1, file) {
      if (err1) {
        return res.sendStatus(500);
      } else {
        return picture.save(function(err2, picture) {
          if (err2) {
            return res.sendStatus(500);
          } else {
            return res.sendStatus(201);
          }
        });
      }
    }).then(function() {
      return fs.unlinkSync(fullFilePath);
    });
  });
});

api.get('/pictures', function(req, res) {
  return PictureMetadata.find({}).sort('fileName').exec(function(err, picturesInfo) {
    if (err) {
      return res.sendStatus(500);
    } else {
      return res.json(picturesInfo);
    }
  });
});

api.get('/picture', function(req, res) {
  return PictureFile.find({}).sort('fileName').exec(function(err, files) {
    var file, i, len;
    if (err) {
      return res.sendStatus(500);
    } else {
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        if (file.fileName.toString() === req.query.fileToGet) {
          res.set({
            'Content-Type': 'image/jpeg'
          });
          res.set({
            'lastFile': file.fileName
          });
          res.send(file.file);
          return;
        }
      }
      return res.sendStatus(500);
    }
  });
});

api.put('/picture', function(req, res) {
  return PictureMetadata.findOne({
    fileName: req.query.fileName
  }, function(err, picture) {
    if (err) {
      return res.sendStatus(500);
    } else {
      picture.x = req.query.x;
      picture.y = req.query.y;
      picture.save();
      return res.sendStatus(200);
    }
  });
});

api["delete"]('/picture', function(req, res) {
  var fileNameToDelete;
  fileNameToDelete = req.query.fileName;
  console.log('dleeteing: ' + fileNameToDelete);
  return PictureMetadata.find({
    fileName: fileNameToDelete
  }).remove(function(err1, removedPicture) {
    if (err1) {
      return res.sendStatus(500);
    } else {
      return PictureFile.find({
        fileName: fileNameToDelete
      }).remove(function(err2, removedFile) {
        if (err2) {
          return res.sendStatus(500);
        } else {
          return res.sendStatus(200);
        }
      });
    }
  });
});

module.exports = api;

// Generated by CoffeeScript 1.9.3
var Message, PictureFile, PictureMetadata, fs, isLoggedIn;

fs = require('fs');

Message = require('../models/Message');

PictureMetadata = require('../models/pictureMetadata');

PictureFile = require('../models/PictureFile');

isLoggedIn = function(req, res, next) {
  if (req.isAuthenticated()) {
    return next();
  } else {
    return res.sendStatus(500);
  }
};

module.exports = function(app, passport) {
  var io;
  io = app.io;
  io.on('connection', function(socket) {
    Message.find({}).sort('timestamp').exec(function(err, messages) {
      if (!err) {
        return socket.emit('initialMessages', messages);
      }
    });
    socket.on('newMessage', function(data) {
      var newMessage;
      newMessage = new Message({
        timestamp: (new Date()).getTime(),
        user: data.user,
        content: data.content
      });
      return newMessage.save(function(err, message) {
        if (!err) {
          return io.emit('newMessage', message);
        }
      });
    });
    return socket.on('removeMessage', function(timestamp) {
      return Message.find({
        timestamp: timestamp
      }).remove(function(err, removedMessage) {
        if (!err) {
          return io.emit('removeMessage', timestamp);
        }
      });
    });
  });
  app.post('/api/picture', isLoggedIn, function(req, res) {
    var fileName, fullFilePath, x, y;
    fileName = (new Date()).getTime();
    x = req.query.x;
    y = req.query.y;
    fullFilePath = __dirname + '/' + fileName + Math.floor(Math.random() * 20000);
    return req.pipe(fs.createWriteStream(fullFilePath)).on('finish', function() {
      var file, picture;
      picture = new PictureMetadata({
        fileName: fileName,
        x: x,
        y: y
      });
      file = new PictureFile({
        fileName: fileName,
        file: fs.readFileSync(fullFilePath)
      });
      return file.save(function(err1, file) {
        if (err1) {
          return res.sendStatus(500);
        } else {
          return picture.save(function(err2, picture) {
            if (err2) {
              return res.sendStatus(500);
            } else {
              return res.sendStatus(201);
            }
          });
        }
      }).then(function() {
        return fs.unlinkSync(fullFilePath);
      });
    });
  });
  app.get('/api/pictures', isLoggedIn, function(req, res) {
    return PictureMetadata.find({}).sort('fileName').exec(function(err, picturesInfo) {
      if (err) {
        return res.sendStatus(500);
      } else {
        return res.json(picturesInfo);
      }
    });
  });
  app.get('/api/picture', isLoggedIn, function(req, res) {
    return PictureFile.find({}).sort('fileName').exec(function(err, files) {
      var file, i, len;
      if (err) {
        return res.sendStatus(500);
      } else {
        for (i = 0, len = files.length; i < len; i++) {
          file = files[i];
          if (file.fileName.toString() === req.query.fileToGet) {
            res.set({
              'Content-Type': 'image/jpeg'
            });
            res.set({
              'lastFile': file.fileName
            });
            res.send(file.file);
            return;
          }
        }
        return res.sendStatus(500);
      }
    });
  });
  app.put('/api/picture', isLoggedIn, function(req, res) {
    return PictureMetadata.findOne({
      fileName: req.query.fileName
    }, function(err, picture) {
      if (err) {
        return res.sendStatus(500);
      } else {
        picture.x = req.query.x;
        picture.y = req.query.y;
        picture.save();
        return res.sendStatus(200);
      }
    });
  });
  return app["delete"]('/api/picture', isLoggedIn, function(req, res) {
    var fileNameToDelete;
    fileNameToDelete = req.query.fileName;
    return PictureMetadata.find({
      fileName: fileNameToDelete
    }).remove(function(err1, removedPicture) {
      if (err1) {
        return res.sendStatus(500);
      } else {
        return PictureFile.find({
          fileName: fileNameToDelete
        }).remove(function(err2, removedFile) {
          if (err2) {
            return res.sendStatus(500);
          } else {
            return res.sendStatus(200);
          }
        });
      }
    });
  });
};

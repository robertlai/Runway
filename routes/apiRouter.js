// Generated by CoffeeScript 1.9.3
var Group, Item, User, express, fs, isLoggedIn, multer, upload;

express = require('express');

fs = require('fs');

multer = require('multer');

upload = multer({
  dest: 'uploads/'
});

Item = require('../models/Item');

User = require('../models/User');

Group = require('../models/Group');

isLoggedIn = function(req, res, next) {
  if (req.isAuthenticated()) {
    return next();
  } else {
    return res.sendStatus(500);
  }
};

module.exports = function(passport, io) {
  var apiRouter;
  apiRouter = express.Router();
  apiRouter.get('/groups/:groupType', isLoggedIn, function(req, res) {
    var err, username;
    if (req.params.groupType === 'owned') {
      username = req.user.username;
      try {
        return User.findOne({
          username: username
        }, function(err1, user) {
          if (err1) {
            throw err1;
          }
          return res.json(user.groups);
        });
      } catch (_error) {
        err = _error;
        return res.sendStatus(500);
      }
    } else if (req.params.groupType === 'joined') {
      return res.json(['joined group 1', 'joined group 2', 'joined group 3', 'joined group 4', 'joined group 5', 'joined group 6', 'joined group 7']);
    } else {
      return res.sendStatus(404);
    }
  });
  apiRouter.post('/newGroup', isLoggedIn, function(req, res) {
    var err, newGroupName, username;
    username = req.user.username;
    newGroupName = req.query.newGroupName;
    try {
      return Group.find({
        name: newGroupName
      }, function(err1, groups) {
        var newGroup;
        if (err1) {
          throw err1;
        }
        if (groups.length > 0) {
          return res.sendStatus(409);
        } else {
          newGroup = new Group({
            name: newGroupName
          });
          return newGroup.save(function(err2, group) {
            if (err2) {
              throw err2;
            }
            return User.findOne({
              username: username
            }, function(err3, user) {
              if (err3) {
                throw err3;
              }
              user.groups.push(newGroupName);
              return user.save(function(err4, user2) {
                if (err4) {
                  throw err4;
                }
                return res.json(newGroupName);
              });
            });
          });
        }
      });
    } catch (_error) {
      err = _error;
      return res.sendStatus(500);
    }
  });
  apiRouter.post('/text', isLoggedIn, function(req, res) {
    var err, fileName, group, item, text, type, x, y;
    fileName = (new Date()).getTime();
    group = req.query.group;
    type = 'text';
    x = 1;
    y = 1;
    text = req.body.text;
    try {
      item = new Item({
        group: group,
        fileName: fileName,
        type: type,
        x: x,
        y: y,
        text: text
      });
      return item.save(function(err1, file) {
        var newItem;
        if (err1) {
          throw err1;
        }
        newItem = {
          fileName: fileName,
          type: type,
          x: x,
          y: y,
          text: text
        };
        io.sockets["in"](group).emit('newItem', newItem);
        return res.sendStatus(201);
      });
    } catch (_error) {
      err = _error;
      return res.sendStatus(500);
    }
  });
  apiRouter.post('/fileUpload', isLoggedIn, upload.single('file'), function(req, res) {
    var fileName, fullFilePath, group, item, type, x, y;
    fileName = (new Date()).getTime();
    group = req.query.group;
    type = req.file.mimetype;
    x = req.query.x;
    y = req.query.y;
    fullFilePath = req.file.path;
    item = new Item({
      fileName: fileName,
      group: group,
      type: type,
      x: x,
      y: y,
      file: fs.readFileSync(fullFilePath)
    });
    return item.save(function(err1) {
      var newItem;
      if (!err1) {
        newItem = {
          fileName: fileName,
          type: type,
          x: x,
          y: y
        };
        io.sockets["in"](group).emit('newItem', newItem);
      }
      res.redirect('back');
      return fs.unlinkSync(fullFilePath);
    });
  });
  apiRouter.get('/picture', isLoggedIn, function(req, res) {
    var err;
    try {
      return Item.findOne({
        fileName: req.query.fileToGet,
        group: req.query.groupName
      }).select('file type').exec(function(err, file) {
        var b;
        if (!file || err) {
          throw err;
        }
        res.set({
          'Content-Type': file.type
        });
        b = file.file;
        return res.send(b);
      });
    } catch (_error) {
      err = _error;
      return res.sendStatus(500);
    }
  });
  return apiRouter;
};

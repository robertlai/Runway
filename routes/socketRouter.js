// Generated by CoffeeScript 1.9.3
var Group, Item;

Group = require('../models/Group');

Item = require('../models/Item');

module.exports = function(io) {
  return io.on('connection', function(socket) {
    socket.on('groupConnect', function(user, group) {
      socket.join(group);
      socket.username = user;
      socket.group = group;
      return socket.emit('setupComplete');
    });
    socket.on('getInitialMessages', function() {
      return Group.findOne({
        name: socket.group
      }).select('messages').sort('timestamp').exec(function(err, data) {
        if (data && !err) {
          return socket.emit('initialMessages', data.messages);
        }
      });
    });
    socket.on('postNewMessage', function(messageContent) {
      var newMessage;
      newMessage = {
        timestamp: (new Date()).getTime(),
        user: socket.username,
        content: messageContent
      };
      return Group.update({
        name: socket.group
      }, {
        $push: {
          'messages': newMessage
        }
      }, function(err) {
        if (!err) {
          return io.sockets["in"](socket.group).emit('newMessage', newMessage);
        }
      });
    });
    socket.on('postRemoveMessage', function(timestamp) {
      return Group.update({
        name: socket.group
      }, {
        $pull: {
          'messages': {
            timestamp: timestamp
          }
        }
      }, function(err) {
        if (!err) {
          return io.sockets["in"](socket.group).emit('removeMessage', timestamp);
        }
      });
    });
    socket.on('getInitialItems', function() {
      return Item.find({
        group: socket.group
      }).select('fileName type x y text').sort('fileName').exec(function(err, itemsInfo) {
        var i, itemInfo, len, results;
        if (!err) {
          results = [];
          for (i = 0, len = itemsInfo.length; i < len; i++) {
            itemInfo = itemsInfo[i];
            results.push(socket.emit('newItem', itemInfo));
          }
          return results;
        }
      });
    });
    return socket.on('updateItemLocation', function(fileName, newX, newY) {
      return Item.findOne({
        fileName: fileName
      }).select('fileName x y').exec(function(err, item) {
        if (item && !err) {
          item.x = newX;
          item.y = newY;
          item.save();
          return io.sockets["in"](socket.group).emit('updateItem', item);
        }
      });
    });
  });
};
